#version 410
in vec4 vColor;
in vec4 vPosition;
out vec4 FragColor;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 lightDir;
uniform vec3 cameraPos;
void main() 
{
	vec3 Ldn = normalize(lightDir);
	vec3 surfacePos = normalize(vPosition.xyz);
	float lambert = max(0, dot(surfacePos, -Ldn));
	
	vec3 viewRay = cameraPos - vPosition.xyz;
	viewRay = normalize(viewRay);
	vec3 reflectedRay = reflect(Ldn, surfacePos);
	reflectedRay = reflectedRay;
	reflectedRay = normalize(reflectedRay);
	
	vec4 ambient = vColor * vec4(lightColor, 1);
	vec4 diffuse = vColor * lambert * vec4(lightColor, 1);
	
	vec3 halfway = normalize(lightDir+viewRay);
	float halfDot = max(0,dot(surfacePos, halfway));
	
	float rayDot =  max(0,dot(reflectedRay, viewRay));
	
	float specularTerm = pow(max(0, halfDot), 2.0f);
	vec4 specular = vColor * vec4(lightColor, 1) * specularTerm; 
	FragColor = ambient + diffuse + specular;
}